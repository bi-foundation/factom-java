/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.0.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.factomprotocol.identity.server.controller;

import io.swagger.annotations.*;
import org.factomprotocol.identity.did.model.FactomDidContent;
import org.factomprotocol.identity.did.model.UpdateRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-03-25T02:05:59.258+01:00[Europe/Berlin]")

@Validated
@Api(value = "FactomDid", description = "the FactomDid API")
public interface FactomDidApi {

    @ApiOperation(value = "Create a new DID", nickname = "createFactomDid", notes = "", authorizations = {
        @Authorization(value = "ApiKeyAuth"),
        @Authorization(value = "BearerAuth"),
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "read", description = "read dids"),
            @AuthorizationScope(scope = "write", description = "modify dids")
            })
    }, tags={ "FactomDID", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/factom/identity/dids",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> _createFactomDid(@ApiParam(value = "Create a new Factom DID chain", required = true) @Valid @RequestBody FactomDidContent body);


    @ApiOperation(value = "Deactivate a DID", nickname = "deactivateFactomDid", notes = "", authorizations = {
        @Authorization(value = "ApiKeyAuth"),
        @Authorization(value = "BearerAuth"),
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "write", description = "modify dids")
            })
    }, tags={ "FactomDID", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid DID supplied"),
        @ApiResponse(code = 404, message = "DID not found") })
    @RequestMapping(value = "/factom/identity/dids/{did}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> _deactivateFactomDid(@ApiParam(value = "DID to deactivate", required = true) @PathVariable("did") String did, @ApiParam(value = "") @RequestHeader(value = "api_key", required = false) Optional<String> apiKey);


    @ApiOperation(value = "Find DID", nickname = "getFactomDid", notes = "Returns the Factom DID content", response = FactomDidContent.class, authorizations = {
        @Authorization(value = "ApiKeyAuth"),
        @Authorization(value = "BearerAuth"),
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "read", description = "read dids"),
            @AuthorizationScope(scope = "write", description = "modify dids")
            })
    }, tags={ "FactomDID", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = FactomDidContent.class),
        @ApiResponse(code = 400, message = "Invalid DID suplied"),
        @ApiResponse(code = 404, message = "DID not found") })
    @RequestMapping(value = "/factom/identity/dids/{did}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<FactomDidContent> _getFactomDid(@ApiParam(value = "DID", required = true) @PathVariable("did") String did);


    @ApiOperation(value = "Updates a DID", nickname = "updateFactomDid", notes = "", authorizations = {
        @Authorization(value = "ApiKeyAuth"),
        @Authorization(value = "BearerAuth"),
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "write", description = "modify dids")
            })
    }, tags={ "FactomDID", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/factom/identity/dids/{did}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> _updateFactomDid(@ApiParam(value = "DID", required = true) @PathVariable("did") String did, @ApiParam(value = "", required = true) @Valid @RequestBody UpdateRequest updateRequest);

}
